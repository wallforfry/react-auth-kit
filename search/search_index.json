{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"\ud83d\udd11 Authentication Library for React Js for Token Based Auth with Json Web Token(JWT) \ud83d\udd11 Introduction React Auth Kit is a lightweight Javascript library for React JS, which makes the implementation of Token based authentication very easy It is production-ready, and gives you the following: 1.95 KB Gzipped Build for React Js Easy to Implementation Supports Json Web Token (JWT) Secure Client Side Authentication Highly typed and written in TypeScript Can be implemented using both Higher Order Components and React Hooks 100% type annotated codebase. Zero hard dependencies. Requirements Node Js 8+ React Js 16+ \u2014 \ud83d\udd11 \u2014 React Auth Kit is Apache 2.0 License code","title":"Introduction"},{"location":"#introduction","text":"React Auth Kit is a lightweight Javascript library for React JS, which makes the implementation of Token based authentication very easy It is production-ready, and gives you the following: 1.95 KB Gzipped Build for React Js Easy to Implementation Supports Json Web Token (JWT) Secure Client Side Authentication Highly typed and written in TypeScript Can be implemented using both Higher Order Components and React Hooks 100% type annotated codebase. Zero hard dependencies.","title":"Introduction"},{"location":"#requirements","text":"Node Js 8+ React Js 16+ \u2014 \ud83d\udd11 \u2014 React Auth Kit is Apache 2.0 License code","title":"Requirements"},{"location":"authdata/","text":"Auth User Data Get the Authorized user's state from any Component simply by using HOC or Hooks To get the Authorized user's state from Higher Order Components , use withAuthUser To get the Authorized user's state using React Hooks , use useAuthUser Using Hooks import { useAuthUser } from 'react-auth-kit' Demo import React from 'react' import {useAuthUser} from 'react-auth-kit' const SomeComponent = () => { const auth = useAuthUser() return( <div> Hello {auth.user} </div> ) } Using Higher Order Component import {withAuthUser} from 'react-auth-kit' Demo import React from 'react' import {withAuthUser} from 'react-auth-kit' class SomeComponent extends React.Component { render(){ return ( <div> Hello {this.props.authState.user} </div> ) } } export default withAuthUser(SomeComponent) \u2014 \ud83d\udd11 \u2014 React Auth Kit is Apache 2.0 License code","title":"Auth User Data"},{"location":"authdata/#auth-user-data","text":"Get the Authorized user's state from any Component simply by using HOC or Hooks To get the Authorized user's state from Higher Order Components , use withAuthUser To get the Authorized user's state using React Hooks , use useAuthUser","title":"Auth User Data"},{"location":"authdata/#using-hooks","text":"import { useAuthUser } from 'react-auth-kit'","title":"Using Hooks"},{"location":"authdata/#demo","text":"import React from 'react' import {useAuthUser} from 'react-auth-kit' const SomeComponent = () => { const auth = useAuthUser() return( <div> Hello {auth.user} </div> ) }","title":"Demo"},{"location":"authdata/#using-higher-order-component","text":"import {withAuthUser} from 'react-auth-kit'","title":"Using Higher Order Component"},{"location":"authdata/#demo_1","text":"import React from 'react' import {withAuthUser} from 'react-auth-kit' class SomeComponent extends React.Component { render(){ return ( <div> Hello {this.props.authState.user} </div> ) } } export default withAuthUser(SomeComponent) \u2014 \ud83d\udd11 \u2014 React Auth Kit is Apache 2.0 License code","title":"Demo"},{"location":"authheader/","text":"Auth Header Get the Auth Header for future request from any Component simply by using HOC or Hooks To get the Auth Header from Higher Order Components , use withAuthHeader To get the Auth Header using React Hooks , use useAuthHeader Using Hooks import { useAuthHeader } from 'react-auth-kit' Demo import React from 'react' import {useAuthHeader} from 'react-auth-kit' const SomeComponent = () => { const authHeader = useAuthHeader() return( <div> {authHeader} </div> ) } Using Higher Order Component import {withAuthHeader} from 'react-auth-kit' Demo import React from 'react' import {withAuthHeader} from 'react-auth-kit' class SomeComponent extends React.Component { render(){ return ( <div> {this.props.authHeader} </div> ) } } export default withAuthHeader(SomeComponent) \u2014 \ud83d\udd11 \u2014 React Auth Kit is Apache 2.0 License code","title":"Auth Header"},{"location":"authheader/#auth-header","text":"Get the Auth Header for future request from any Component simply by using HOC or Hooks To get the Auth Header from Higher Order Components , use withAuthHeader To get the Auth Header using React Hooks , use useAuthHeader","title":"Auth Header"},{"location":"authheader/#using-hooks","text":"import { useAuthHeader } from 'react-auth-kit'","title":"Using Hooks"},{"location":"authheader/#demo","text":"import React from 'react' import {useAuthHeader} from 'react-auth-kit' const SomeComponent = () => { const authHeader = useAuthHeader() return( <div> {authHeader} </div> ) }","title":"Demo"},{"location":"authheader/#using-higher-order-component","text":"import {withAuthHeader} from 'react-auth-kit'","title":"Using Higher Order Component"},{"location":"authheader/#demo_1","text":"import React from 'react' import {withAuthHeader} from 'react-auth-kit' class SomeComponent extends React.Component { render(){ return ( <div> {this.props.authHeader} </div> ) } } export default withAuthHeader(SomeComponent) \u2014 \ud83d\udd11 \u2014 React Auth Kit is Apache 2.0 License code","title":"Demo"},{"location":"checkauth/","text":"Check Authentication Check if any user is authenticated or not Introduction There is many time, when you have to understand if any user is authenticated (especially in login pages, where you have to redirect your user to its dashboard or allow to login) For this reason, React Auth Kit comes with isAuth functions IsAuth functionality available in both hook and Higher Order Component For Functional Components, you can use useIsAuthenticated function inside any components For class based components, you can wrap the component inside withIsAuthenticated function Usage Functional Component Check the authentication status in React Functional Components(FC) by adding the useIsAuthenticated hook inside it. Import import {useIsAuthenticated} from 'react-auth-kit'; Demo import {useIsAuthenticated} from 'react-auth-kit'; const AnyComponent = () => { const isAuthenticated = useIsAuthenticated() if(isAuthenticated()){ // Redirect to Dashboard } else { // Redirect to Login } } API useIsAuthenticated() Returns () => boolean Class Based Component Import import { withIsAuthenticated } from 'react-auth-kit' ; Demo import React from \"react\" ; import { withIsAuthenticated } from 'react-auth-kit' ; class SomeComponent extends React . Component { render (){ if ( this . props . isAuthenticated ()){ // Redirect to Dashboard } else { // Redirect to Login } } } export default withIsAuthenticated ( SomeComponent ) API withIsAuthenticated < P > ( Component : React.ComponentType < P > ) : React . FC < P > Parameters Component: React . ComponentType < P > Returns React . FC < P > (Functional Component with isAuthenticated() prop) \u2014 \ud83d\udd11 \u2014 React Auth Kit is Apache 2.0 License code","title":"Check Authentication"},{"location":"checkauth/#check-authentication","text":"Check if any user is authenticated or not","title":"Check Authentication"},{"location":"checkauth/#introduction","text":"There is many time, when you have to understand if any user is authenticated (especially in login pages, where you have to redirect your user to its dashboard or allow to login) For this reason, React Auth Kit comes with isAuth functions IsAuth functionality available in both hook and Higher Order Component For Functional Components, you can use useIsAuthenticated function inside any components For class based components, you can wrap the component inside withIsAuthenticated function","title":"Introduction"},{"location":"checkauth/#usage","text":"","title":"Usage"},{"location":"checkauth/#functional-component","text":"Check the authentication status in React Functional Components(FC) by adding the useIsAuthenticated hook inside it.","title":"Functional Component"},{"location":"checkauth/#import","text":"import {useIsAuthenticated} from 'react-auth-kit';","title":"Import"},{"location":"checkauth/#demo","text":"import {useIsAuthenticated} from 'react-auth-kit'; const AnyComponent = () => { const isAuthenticated = useIsAuthenticated() if(isAuthenticated()){ // Redirect to Dashboard } else { // Redirect to Login } }","title":"Demo"},{"location":"checkauth/#api","text":"useIsAuthenticated() Returns () => boolean","title":"API"},{"location":"checkauth/#class-based-component","text":"","title":"Class Based Component"},{"location":"checkauth/#import_1","text":"import { withIsAuthenticated } from 'react-auth-kit' ;","title":"Import"},{"location":"checkauth/#demo_1","text":"import React from \"react\" ; import { withIsAuthenticated } from 'react-auth-kit' ; class SomeComponent extends React . Component { render (){ if ( this . props . isAuthenticated ()){ // Redirect to Dashboard } else { // Redirect to Login } } } export default withIsAuthenticated ( SomeComponent )","title":"Demo"},{"location":"checkauth/#api_1","text":"withIsAuthenticated < P > ( Component : React.ComponentType < P > ) : React . FC < P > Parameters Component: React . ComponentType < P > Returns React . FC < P > (Functional Component with isAuthenticated() prop) \u2014 \ud83d\udd11 \u2014 React Auth Kit is Apache 2.0 License code","title":"API"},{"location":"contributing/","text":"Contributing Notice something that needs fixing? Or something that could be improved? Awesome! Here are some guidelines below that'll help you to do just that. In general, there are two main types of contribution, General improvements: Typo corrections. Fixing broken refs and links. Correcting inaccurate or out of date info. Offering better explanations through clear writings and examples. New Pages or features Adding a page of documentation that we haven't covered yet. Documenting a new feature that had been added to this project since its last release. Before contributing Read the CONTRIBUTING.md first if you haven't yet. Familiarize yourself with Mkdocs and Material for MkDocs with which we created the documentation. Read through some of our existing documents and get a feel about the overall structure and style. Read our 'Best practices' section and please ensure your PR meets those. Steps for local setup We use Github Flow , all code changes happen through Pull Requests . Follow the steps specified at CONTRIBUTING.md to set up a local repo of the project. Install Material for MkDocs. Pip pip install mkdocs-material This will automatically install compatible versions of all dependencies: MkDocs , Markdown , Pygments and Python Markdown Extensions . Docker The official Docker image is a great way to get up and running in a few minutes, as it comes with all dependencies pre-installed. Pull the image for the latest version with: docker pull squidfunk/mkdocs-materiall The mkdocs executable is provided as an entry point and serve is the default command. Git Material for MkDocs can be directly used from GitHub by cloning the repository into a subfolder of your project root which might be useful if you want to use the very latest version: git clone https://github.com/squidfunk/mkdocs-material.git The theme will reside in the folder mkdocs-material/material. When cloning from git, you must install all required dependencies yourself: pip install -r mkdocs-material/requirements.txt All the contents are in the docs folder and the mkdocs config in mkdocs.yml relative to the project root directory. MkDocs includes a live preview server, so you can preview your changes as you modify the documentation. The server will automatically rebuild the site upon saving. Start it with: mkdocs serve You are now all set up and ready to contribute! Best practices All pages must include a proper title and an introduction. If the document contains a technical term, it must be highlighted using *term* markdown syntax. If the document contains an acronym or initialism, it should be first introduced highlighted in its expanded form followed by the commonly-accepted abbreviation in brackets (like Free and open-source software (FOSS)). Use paragraphs to introduce a single concept and move on to a new paragraph before introducing another or expanding upon the first concept. Keep the size of those paragraphs to no more than four to five lines. If you find you're putting commas in a sentence consider splitting it into two or more sentences for improved clarity. Split the document up into as many sub-sections as makes sense. This is especially helpful for the readers who want to skip ahead for reference, as we can also use subheads as navigational anchors. \u2014 \ud83d\udd11 \u2014 React Auth Kit is Apache 2.0 License code","title":"Contributing"},{"location":"contributing/#contributing","text":"Notice something that needs fixing? Or something that could be improved? Awesome! Here are some guidelines below that'll help you to do just that. In general, there are two main types of contribution, General improvements: Typo corrections. Fixing broken refs and links. Correcting inaccurate or out of date info. Offering better explanations through clear writings and examples. New Pages or features Adding a page of documentation that we haven't covered yet. Documenting a new feature that had been added to this project since its last release.","title":"Contributing"},{"location":"contributing/#before-contributing","text":"Read the CONTRIBUTING.md first if you haven't yet. Familiarize yourself with Mkdocs and Material for MkDocs with which we created the documentation. Read through some of our existing documents and get a feel about the overall structure and style. Read our 'Best practices' section and please ensure your PR meets those.","title":"Before contributing"},{"location":"contributing/#steps-for-local-setup","text":"We use Github Flow , all code changes happen through Pull Requests . Follow the steps specified at CONTRIBUTING.md to set up a local repo of the project. Install Material for MkDocs. Pip pip install mkdocs-material This will automatically install compatible versions of all dependencies: MkDocs , Markdown , Pygments and Python Markdown Extensions . Docker The official Docker image is a great way to get up and running in a few minutes, as it comes with all dependencies pre-installed. Pull the image for the latest version with: docker pull squidfunk/mkdocs-materiall The mkdocs executable is provided as an entry point and serve is the default command. Git Material for MkDocs can be directly used from GitHub by cloning the repository into a subfolder of your project root which might be useful if you want to use the very latest version: git clone https://github.com/squidfunk/mkdocs-material.git The theme will reside in the folder mkdocs-material/material. When cloning from git, you must install all required dependencies yourself: pip install -r mkdocs-material/requirements.txt All the contents are in the docs folder and the mkdocs config in mkdocs.yml relative to the project root directory. MkDocs includes a live preview server, so you can preview your changes as you modify the documentation. The server will automatically rebuild the site upon saving. Start it with: mkdocs serve You are now all set up and ready to contribute!","title":"Steps for local setup"},{"location":"contributing/#best-practices","text":"All pages must include a proper title and an introduction. If the document contains a technical term, it must be highlighted using *term* markdown syntax. If the document contains an acronym or initialism, it should be first introduced highlighted in its expanded form followed by the commonly-accepted abbreviation in brackets (like Free and open-source software (FOSS)). Use paragraphs to introduce a single concept and move on to a new paragraph before introducing another or expanding upon the first concept. Keep the size of those paragraphs to no more than four to five lines. If you find you're putting commas in a sentence consider splitting it into two or more sentences for improved clarity. Split the document up into as many sub-sections as makes sense. This is especially helpful for the readers who want to skip ahead for reference, as we can also use subheads as navigational anchors. \u2014 \ud83d\udd11 \u2014 React Auth Kit is Apache 2.0 License code","title":"Best practices"},{"location":"installation/","text":"Installation Using Package Manager Using NPM npm install --save react-auth-kit Using Yarn yarn add react-auth-kit Using CDN Unpkg https://unpkg.com/react-auth-kit/dist/index.umd.js JsDelivr https://cdn.jsdelivr.net/npm/react-auth-kit/dist/index.umd.js \u2014 \ud83d\udd11 \u2014 React Auth Kit is Apache 2.0 License code","title":"Installation"},{"location":"installation/#installation","text":"","title":"Installation"},{"location":"installation/#using-package-manager","text":"","title":"Using Package Manager"},{"location":"installation/#using-npm","text":"npm install --save react-auth-kit","title":"Using NPM"},{"location":"installation/#using-yarn","text":"yarn add react-auth-kit","title":"Using Yarn"},{"location":"installation/#using-cdn","text":"","title":"Using CDN"},{"location":"installation/#unpkg","text":"https://unpkg.com/react-auth-kit/dist/index.umd.js","title":"Unpkg"},{"location":"installation/#jsdelivr","text":"https://cdn.jsdelivr.net/npm/react-auth-kit/dist/index.umd.js \u2014 \ud83d\udd11 \u2014 React Auth Kit is Apache 2.0 License code","title":"JsDelivr"},{"location":"privateroute/","text":"Private Route Implement Private Route on your React App React Auth Kit has a PrivateRoute functionality Based on React Router Import import { PrivateRoute } from 'react-auth-kit' Implementation Add PrivateRoute in your Routes Files inside BrowserRouter or HashRouter Demo <BrowserRouter> <PrivateRoute component={privateComponent} path={'/privateRoute'} loginPath={'/loginPath'} exact/> </BrowserRouter> Full Code import React from \"react\" import {BrowserRouter, Route} from \"react-router-dom\" import { PrivateRoute } from 'react-auth-kit' const Routes = () => { return ( <BrowserRouter> <Route component={LoginComponent} path={'/login'} exact/> <PrivateRoute component={privateComponent} path={'/privateRoute'} loginPath={'/loginPath'} exact/> </BrowserRouter> ) } Props As PrivateRoute is a derived version of Route from React-Router , that's why the props are same as Route props. Check this link . Added Prop : loginPath ( Require ): The fallback path, if the user is unauthorized. \u26a0 The only big difference is PrivateRoute doesn't support children prop. So please don't use that. \u2014 \ud83d\udd11 \u2014 React Auth Kit is Apache 2.0 License code","title":"Private Route"},{"location":"privateroute/#private-route","text":"Implement Private Route on your React App React Auth Kit has a PrivateRoute functionality Based on React Router","title":"Private Route"},{"location":"privateroute/#import","text":"import { PrivateRoute } from 'react-auth-kit'","title":"Import"},{"location":"privateroute/#implementation","text":"Add PrivateRoute in your Routes Files inside BrowserRouter or HashRouter","title":"Implementation"},{"location":"privateroute/#demo","text":"<BrowserRouter> <PrivateRoute component={privateComponent} path={'/privateRoute'} loginPath={'/loginPath'} exact/> </BrowserRouter> Full Code import React from \"react\" import {BrowserRouter, Route} from \"react-router-dom\" import { PrivateRoute } from 'react-auth-kit' const Routes = () => { return ( <BrowserRouter> <Route component={LoginComponent} path={'/login'} exact/> <PrivateRoute component={privateComponent} path={'/privateRoute'} loginPath={'/loginPath'} exact/> </BrowserRouter> ) }","title":"Demo"},{"location":"privateroute/#props","text":"As PrivateRoute is a derived version of Route from React-Router , that's why the props are same as Route props. Check this link . Added Prop : loginPath ( Require ): The fallback path, if the user is unauthorized. \u26a0 The only big difference is PrivateRoute doesn't support children prop. So please don't use that. \u2014 \ud83d\udd11 \u2014 React Auth Kit is Apache 2.0 License code","title":"Props"},{"location":"refreshtoken/","text":"Refresh Tokens Refresh your auth Tokens in an interval Sometimes, you need to refresh authentication token details, or the authenticated user's state (information). To do this dynamically in your component, You have to include the RefreshToken object in your component. You can use in both React Hooks or React Higher Order Component for both Functional Components and Class-based Components 1. Add Refresh Token Object in Component Refresh Token using Hooks in Functional Components RefreshToken object can be included in functional component using useRefreshToken hook import { useRefreshToken } from 'react-auth-kit' Demo import React from \"react\" import { useRefreshToken } from 'react-auth-kit' const AnyPrivateComponent = () => { const refreshToken = useRefreshToken() ... } Refresh Token using Higher Order Component in Class-based Components Sign In using Higher Order Component using withSignOut . Add the withSignOut HOC and call the this.props.signOut function inside the component import { withSignOut } from 'react-auth-kit' Demo import React from \"react\" import { withRefreshToken } from 'react-auth-kit' class AnyPrivateComponent extends React.Component { render(){ const {refreshToken} = this.props return ( ... ) } } export default withRefreshToken(AnyPrivateComponent) 2. Implement refreshToken object methods RefreshToken has all the methods you need to refresh the auth states programmatically. Methods There are 4 methods, you can use to refresh the Auth Token and User's details getCurrentAuthState() : Get the current auth token, auth token type, expiring time getCurrentUserState() : Get the current user state updateAuthState() : Update the auth state including auth token, auth token type and expiring time updateUserState() : Update the user's auth state See the example below for the usage, and see the API for detailed description. Full Demo (using hook and FC) import React from 'react' import axios from 'axios' import {useRefreshToken} from 'react-auth-kit' const RefreshComponent = () => { const refreshToken = useRefreshToken() // Create the refresh token object React.useEffect(()=>{ const {authToken, authTokenType, expireAt} = refreshToken.getCurrentAuthState() //Get the current state const userState = refreshToken.getCurrentUserState() //Get the current user's state //Send the current auth token ad user state to backend axios.post('/some/refresh/api/to/backend', data={ authToken: authToken, authTokenType: authTokenType, expireAt: expireAt, userState: userState }).then((res)=>{ if(res.status === 200) { // Setting the auth state refreshToken.updateAuthState(res.data.authToken, res.data.authTokenType, res.data.expireIn) // Setting the userstate refreshToken.updateUserState(res.data.userState) } else { // Throw error } }) },[]) return <React.Fragment/> } RefreshToken API RefreshToken has the following 4 methods. getCurrentAuthState() : Get the current auth state as an object Returns { authToken : string | null ; authTokenType : string | null ; expireAt : Date | null } authToken : current auth token authTokenType : current auth Token type (eg. Bearer) expireAt : current expire time getCurrentUserState() : Get the Current User State Returns object | null - Current User state getCurrentRefreshToken() : Get the current Refresh Token Returns { refreshToken : string | null ; refreshTokenExpireAt : Date | null } refreshToken : string | null - Current Refresh Token refreshTokenExpireAt : Date | null - Expiry time of current refresh Token updateAuthState() : updates the AuthState Parameters authToken : string The Updated authToken optional authTokenType : undefined | string The updated authType (optional) optional expiresIn : undefined | number The updated expiresIn in minutes. (optional) If the new authToken has different expire time, then you must have to update the expiresIn param Returns void updateRefreshToken() : Updates the Current Refresh Token Parameters refreshToken : string New Refresh Token expiresIn : number New Expiry Time for the new Refresh Token in Minutes Returns void updateUserState() : Updates the Auth User's state Parameters userState : object Updated User State Returns void \u2014 \ud83d\udd11 \u2014 React Auth Kit is Apache 2.0 License code","title":"Refresh Token"},{"location":"refreshtoken/#refresh-tokens","text":"Refresh your auth Tokens in an interval Sometimes, you need to refresh authentication token details, or the authenticated user's state (information). To do this dynamically in your component, You have to include the RefreshToken object in your component. You can use in both React Hooks or React Higher Order Component for both Functional Components and Class-based Components","title":"Refresh Tokens"},{"location":"refreshtoken/#1-add-refresh-token-object-in-component","text":"","title":"1. Add Refresh Token Object in Component"},{"location":"refreshtoken/#refresh-token-using-hooks-in-functional-components","text":"RefreshToken object can be included in functional component using useRefreshToken hook import { useRefreshToken } from 'react-auth-kit'","title":"Refresh Token using Hooks in Functional Components"},{"location":"refreshtoken/#demo","text":"import React from \"react\" import { useRefreshToken } from 'react-auth-kit' const AnyPrivateComponent = () => { const refreshToken = useRefreshToken() ... }","title":"Demo"},{"location":"refreshtoken/#refresh-token-using-higher-order-component-in-class-based-components","text":"Sign In using Higher Order Component using withSignOut . Add the withSignOut HOC and call the this.props.signOut function inside the component import { withSignOut } from 'react-auth-kit'","title":"Refresh Token using Higher Order Component in Class-based Components"},{"location":"refreshtoken/#demo_1","text":"import React from \"react\" import { withRefreshToken } from 'react-auth-kit' class AnyPrivateComponent extends React.Component { render(){ const {refreshToken} = this.props return ( ... ) } } export default withRefreshToken(AnyPrivateComponent)","title":"Demo"},{"location":"refreshtoken/#2-implement-refreshtoken-object-methods","text":"RefreshToken has all the methods you need to refresh the auth states programmatically.","title":"2. Implement refreshToken object methods"},{"location":"refreshtoken/#methods","text":"There are 4 methods, you can use to refresh the Auth Token and User's details getCurrentAuthState() : Get the current auth token, auth token type, expiring time getCurrentUserState() : Get the current user state updateAuthState() : Update the auth state including auth token, auth token type and expiring time updateUserState() : Update the user's auth state See the example below for the usage, and see the API for detailed description.","title":"Methods"},{"location":"refreshtoken/#full-demo-using-hook-and-fc","text":"import React from 'react' import axios from 'axios' import {useRefreshToken} from 'react-auth-kit' const RefreshComponent = () => { const refreshToken = useRefreshToken() // Create the refresh token object React.useEffect(()=>{ const {authToken, authTokenType, expireAt} = refreshToken.getCurrentAuthState() //Get the current state const userState = refreshToken.getCurrentUserState() //Get the current user's state //Send the current auth token ad user state to backend axios.post('/some/refresh/api/to/backend', data={ authToken: authToken, authTokenType: authTokenType, expireAt: expireAt, userState: userState }).then((res)=>{ if(res.status === 200) { // Setting the auth state refreshToken.updateAuthState(res.data.authToken, res.data.authTokenType, res.data.expireIn) // Setting the userstate refreshToken.updateUserState(res.data.userState) } else { // Throw error } }) },[]) return <React.Fragment/> }","title":"Full Demo (using hook and FC)"},{"location":"refreshtoken/#refreshtoken-api","text":"RefreshToken has the following 4 methods. getCurrentAuthState() : Get the current auth state as an object Returns { authToken : string | null ; authTokenType : string | null ; expireAt : Date | null } authToken : current auth token authTokenType : current auth Token type (eg. Bearer) expireAt : current expire time getCurrentUserState() : Get the Current User State Returns object | null - Current User state getCurrentRefreshToken() : Get the current Refresh Token Returns { refreshToken : string | null ; refreshTokenExpireAt : Date | null } refreshToken : string | null - Current Refresh Token refreshTokenExpireAt : Date | null - Expiry time of current refresh Token updateAuthState() : updates the AuthState Parameters authToken : string The Updated authToken optional authTokenType : undefined | string The updated authType (optional) optional expiresIn : undefined | number The updated expiresIn in minutes. (optional) If the new authToken has different expire time, then you must have to update the expiresIn param Returns void updateRefreshToken() : Updates the Current Refresh Token Parameters refreshToken : string New Refresh Token expiresIn : number New Expiry Time for the new Refresh Token in Minutes Returns void updateUserState() : Updates the Auth User's state Parameters userState : object Updated User State Returns void \u2014 \ud83d\udd11 \u2014 React Auth Kit is Apache 2.0 License code","title":"RefreshToken API"},{"location":"signin/","text":"Sign In Implement Sign In on your React App React Auth Kit has easy to implement Sign In procedures. signIn functionality available in both hook and Higher Order Component For Functional Components, you can use useSignIn function inside any components For class based components, you can wrap the component inside withSignIn function Usage Functional Component signIn in React Functional Components(FC) by adding the useSignIn hook inside it. Import import { useSignIn } from 'react-auth-kit' Demo import { useSignIn } from 'react-auth-kit' const SignInComponent = () => { const signIn = useSignIn() ... const onSubmit = (e) => { ... if(signIn({token: res.data.token, expiresIn:res.data.expiresIn, tokenType: \"Bearer\", authState: res.data.authUserState, refreshToken: res.data.refreshToken, // Only if you are using refreshToken feature refreshTokenExpireIn: res.data.refreshTokenExpireIn})){ // Only if you are using refreshToken feature // Redirect or do-something }else { //Throw error } } return ( ... ) } Full Example Code import React from \"react\" import axios from 'axios' import { useSignIn } from 'react-auth-kit' const SignInComponent = () => { const signIn = useSignIn() const [formData, setFormData] = React.useState({email: '', password: ''}) const onSubmit = (e) => { e.preventDefault() axios.post('/api/login', formData) .then((res)=>{ if(res.status === 200){ if(signIn({token: res.data.token, expiresIn:res.data.expiresIn, tokenType: \"Bearer\", authState: res.data.authUserState, refreshToken: res.data.refreshToken, // Only if you are using refreshToken feature refreshTokenExpireIn: res.data.refreshTokenExpireIn})){ // Only if you are using refreshToken feature // Redirect or do-something }else { //Throw error } } }) } return ( <form onSubmit={onSubmit}> <input type={\"email\"} onChange={(e)=>setFormData({...formData, email: e.target.value})}/> <input type={\"password\"} onChange={(e)=>setFormData({...formData, password: e.target.value})}/> <button>Submit</button> </form> ) } API useSignIn () : ( signInConfig ) => boolean For details about signInConfig , please go to the signInConfig section Class Based Component Sign In using Higher Order Component using withSignIn Import import { withSignIn } from 'react-auth-kit' Demo import { withSignIn } from 'react-auth-kit' class signInComponent extends React.Component { const onSubmit = (e) => { ... if(this.props.signIn({token: res.data.token, expiresIn:res.data.expiresIn, tokenType: \"Bearer\", authState: res.data.authUserState})){ // Redirect or do-something }else { //Throw error } } render(){ ... } } export default withSignIn(signInComponent) Full Example Code import React from 'react' import axios from 'axios' import { withSignIn } from 'react-auth-kit' class signInComponent extends React.Component { state={email: '', password: ''} onSubmit = (e) => { e.preventDefault() axios.post('/api/login', this.state) .then((res)=>{ if(res.status === 200){ if(this.props.signIn({token: res.data.token, expiresIn:res.data.expiresIn, tokenType: \"Bearer\", authState: res.data.authUserState})){ // Redirect or do-something }else { //Throw error } } }) } render(){ return ( <form onSubmit={onSubmit}> <input type={\"email\"} onChange={(e)=>this.setState({...this.state, email: e.target.value})}/> <input type={\"password\"} onChange={(e)=>this.setState({...this.state, password: e.target.value})}/> <button>Submit</button> </form> ) } } export default withSignIn(signInComponent) API withSignIn ( Component : React.ComponentType ) : React . FC Returns React . FC < P > (Functional Component with signIn(signInConfig) prop) For details about signInConfig , please go to the signInConfig section SignInConfig { token : string tokenType : string | 'Bearer' expiresIn : number authState : object refreshToken ?: string refreshTokenExpireIn ?: number } Explanation of SignInConfig Name Type Description token string The Authentication token (JWT) to be stored from server tokenType string | 'Bearer' The type of authentication token. expiresIn number The time for which the auth token will last, in minutes authState object ( optional ) State of the authorized user. Eg: { name : Jhon , email : jhon @ auth . com } refreshToken string ( optional ) Refresh Token sent by the server. Use only, if you are using refresh token feature. For more info Go to the Refresh Token page refreshTokenExpireIn number ( optional ) The time for which the refresh token will last, in minutes , Use only, if you are using refresh token feature. For more info Go to the Refresh Token page \u2014 \ud83d\udd11 \u2014 React Auth Kit is Apache 2.0 License code","title":"Sign In"},{"location":"signin/#sign-in","text":"Implement Sign In on your React App React Auth Kit has easy to implement Sign In procedures. signIn functionality available in both hook and Higher Order Component For Functional Components, you can use useSignIn function inside any components For class based components, you can wrap the component inside withSignIn function","title":"Sign In"},{"location":"signin/#usage","text":"","title":"Usage"},{"location":"signin/#functional-component","text":"signIn in React Functional Components(FC) by adding the useSignIn hook inside it.","title":"Functional Component"},{"location":"signin/#import","text":"import { useSignIn } from 'react-auth-kit'","title":"Import"},{"location":"signin/#demo","text":"import { useSignIn } from 'react-auth-kit' const SignInComponent = () => { const signIn = useSignIn() ... const onSubmit = (e) => { ... if(signIn({token: res.data.token, expiresIn:res.data.expiresIn, tokenType: \"Bearer\", authState: res.data.authUserState, refreshToken: res.data.refreshToken, // Only if you are using refreshToken feature refreshTokenExpireIn: res.data.refreshTokenExpireIn})){ // Only if you are using refreshToken feature // Redirect or do-something }else { //Throw error } } return ( ... ) } Full Example Code import React from \"react\" import axios from 'axios' import { useSignIn } from 'react-auth-kit' const SignInComponent = () => { const signIn = useSignIn() const [formData, setFormData] = React.useState({email: '', password: ''}) const onSubmit = (e) => { e.preventDefault() axios.post('/api/login', formData) .then((res)=>{ if(res.status === 200){ if(signIn({token: res.data.token, expiresIn:res.data.expiresIn, tokenType: \"Bearer\", authState: res.data.authUserState, refreshToken: res.data.refreshToken, // Only if you are using refreshToken feature refreshTokenExpireIn: res.data.refreshTokenExpireIn})){ // Only if you are using refreshToken feature // Redirect or do-something }else { //Throw error } } }) } return ( <form onSubmit={onSubmit}> <input type={\"email\"} onChange={(e)=>setFormData({...formData, email: e.target.value})}/> <input type={\"password\"} onChange={(e)=>setFormData({...formData, password: e.target.value})}/> <button>Submit</button> </form> ) }","title":"Demo"},{"location":"signin/#api","text":"useSignIn () : ( signInConfig ) => boolean For details about signInConfig , please go to the signInConfig section","title":"API"},{"location":"signin/#class-based-component","text":"Sign In using Higher Order Component using withSignIn","title":"Class Based Component"},{"location":"signin/#import_1","text":"import { withSignIn } from 'react-auth-kit'","title":"Import"},{"location":"signin/#demo_1","text":"import { withSignIn } from 'react-auth-kit' class signInComponent extends React.Component { const onSubmit = (e) => { ... if(this.props.signIn({token: res.data.token, expiresIn:res.data.expiresIn, tokenType: \"Bearer\", authState: res.data.authUserState})){ // Redirect or do-something }else { //Throw error } } render(){ ... } } export default withSignIn(signInComponent) Full Example Code import React from 'react' import axios from 'axios' import { withSignIn } from 'react-auth-kit' class signInComponent extends React.Component { state={email: '', password: ''} onSubmit = (e) => { e.preventDefault() axios.post('/api/login', this.state) .then((res)=>{ if(res.status === 200){ if(this.props.signIn({token: res.data.token, expiresIn:res.data.expiresIn, tokenType: \"Bearer\", authState: res.data.authUserState})){ // Redirect or do-something }else { //Throw error } } }) } render(){ return ( <form onSubmit={onSubmit}> <input type={\"email\"} onChange={(e)=>this.setState({...this.state, email: e.target.value})}/> <input type={\"password\"} onChange={(e)=>this.setState({...this.state, password: e.target.value})}/> <button>Submit</button> </form> ) } } export default withSignIn(signInComponent)","title":"Demo"},{"location":"signin/#api_1","text":"withSignIn ( Component : React.ComponentType ) : React . FC Returns React . FC < P > (Functional Component with signIn(signInConfig) prop) For details about signInConfig , please go to the signInConfig section","title":"API"},{"location":"signin/#signinconfig","text":"{ token : string tokenType : string | 'Bearer' expiresIn : number authState : object refreshToken ?: string refreshTokenExpireIn ?: number }","title":"SignInConfig"},{"location":"signin/#explanation-of-signinconfig","text":"Name Type Description token string The Authentication token (JWT) to be stored from server tokenType string | 'Bearer' The type of authentication token. expiresIn number The time for which the auth token will last, in minutes authState object ( optional ) State of the authorized user. Eg: { name : Jhon , email : jhon @ auth . com } refreshToken string ( optional ) Refresh Token sent by the server. Use only, if you are using refresh token feature. For more info Go to the Refresh Token page refreshTokenExpireIn number ( optional ) The time for which the refresh token will last, in minutes , Use only, if you are using refresh token feature. For more info Go to the Refresh Token page \u2014 \ud83d\udd11 \u2014 React Auth Kit is Apache 2.0 License code","title":"Explanation of SignInConfig"},{"location":"signout/","text":"Sign Out Implement Sign Out on your React App React Auth Kit has easy to implement Sign In procedures. It supports both Hooks and Higher Order Component for both Functional Components and Class-based Components Sign Out using Hooks Sign In using Hooks need useSignOut hook Add the useSignOut hook in the component then call the signOut inside the component import { useSignOut } from 'react-auth-kit' Demo import React from \"react\" import { useSignOut } from 'react-auth-kit' const SignInComponent = () => { const signOut = useSignOut() return ( <button onClick={() => signOut()}>Sign Out</button> ) } Sign Out using Higher Order Component Sign In using Higher Order Component using withSignOut . Add the withSignOut HOC and call the this.props.signOut function inside the component import { withSignOut } from 'react-auth-kit' Demo import React from \"react\" import { withSignOut } from 'react-auth-kit' class signOutComponent extends React.Component { render(){ return ( <button onClick={() => this.props.signOut()}>Sign Out</button> ) } } export default withSignIn(signInComponent) \u2014 \ud83d\udd11 \u2014 React Auth Kit is Apache 2.0 License code","title":"Sign Out"},{"location":"signout/#sign-out","text":"Implement Sign Out on your React App React Auth Kit has easy to implement Sign In procedures. It supports both Hooks and Higher Order Component for both Functional Components and Class-based Components","title":"Sign Out"},{"location":"signout/#sign-out-using-hooks","text":"Sign In using Hooks need useSignOut hook Add the useSignOut hook in the component then call the signOut inside the component import { useSignOut } from 'react-auth-kit'","title":"Sign Out using Hooks"},{"location":"signout/#demo","text":"import React from \"react\" import { useSignOut } from 'react-auth-kit' const SignInComponent = () => { const signOut = useSignOut() return ( <button onClick={() => signOut()}>Sign Out</button> ) }","title":"Demo"},{"location":"signout/#sign-out-using-higher-order-component","text":"Sign In using Higher Order Component using withSignOut . Add the withSignOut HOC and call the this.props.signOut function inside the component import { withSignOut } from 'react-auth-kit'","title":"Sign Out using Higher Order Component"},{"location":"signout/#demo_1","text":"import React from \"react\" import { withSignOut } from 'react-auth-kit' class signOutComponent extends React.Component { render(){ return ( <button onClick={() => this.props.signOut()}>Sign Out</button> ) } } export default withSignIn(signInComponent) \u2014 \ud83d\udd11 \u2014 React Auth Kit is Apache 2.0 License code","title":"Demo"},{"location":"usage/","text":"Usage Integrate the power of React Auth Kit in your React App Introduction The use of react-auth-kit library is very easy and straight forward. It uses a AuthProvider context to bind all its functionalities. So you have to implement that on the top-level of your app (Preferred in App.js ). Note that : AuthProvider must wrap your routing components, so that you can use the PrivateRoute functionality AuthProvider AuthProvider relies on the context feature of React to pass the Auth information down to the components. Import import { AuthProvider } from 'react-auth-kit' Demo Integrate AuthProvider before Routes. The best place is app.js . //app.js import React from 'react'; import { AuthProvider } from 'react-auth-kit' import RouteComponent from './routes'; const App = () => ( <AuthProvider authStorageType = {'cookie'} authStorageName={'_auth_t'} authTimeStorageName={'_auth_time'} stateStorageName={'_auth_state'} cookieDomain={window.location.hostname} cookieSecure={window.location.protocol === \"https:\"} refreshTokenName={'_refresh_t'}> <RouteComponent /> </AuthProvider> ); export default App; Props Name Type Default Description children node The content of the component authStorageType 'localstorage' | 'cookie' 'cookie' The type of the auth storage. In localstorage, the tokens store in localStorage. In cookie, the tokens sotore in cookies. authStorageName string '_auth_t' The name of the storage, which stores the auth token. Applicable for both cookies and localStorage. authTimeStorageName string '_auth_time' The name of the storage, which stores the auth time. Applicable for both cookies and localStorage stateStorageName string '_auth_state' The name of the storage, which stores the auth user state. Applicable for both cookies and localStorage refreshTokenName string ( optional ) The Name of refresh Token storage. If you are now using the refresh token feature, then don't use the prop, if you are using the refresh token feature, only then use the prop. For more information, Go to the Refresh Token page cookieDomain string ( optional ) The Domain name for all cookies. \u26a0 If authStorageType = cookie , then you must put a value Refer this for more info cookieSecure boolean ( optional ) false The cookie secure flag. \u26a0 If authStorageType = cookie , then you must put a value Refer this for more info \u2014 \ud83d\udd11 \u2014 React Auth Kit is Apache 2.0 License code","title":"Usage"},{"location":"usage/#usage","text":"Integrate the power of React Auth Kit in your React App","title":"Usage"},{"location":"usage/#introduction","text":"The use of react-auth-kit library is very easy and straight forward. It uses a AuthProvider context to bind all its functionalities. So you have to implement that on the top-level of your app (Preferred in App.js ). Note that : AuthProvider must wrap your routing components, so that you can use the PrivateRoute functionality","title":"Introduction"},{"location":"usage/#authprovider","text":"AuthProvider relies on the context feature of React to pass the Auth information down to the components.","title":"AuthProvider"},{"location":"usage/#import","text":"import { AuthProvider } from 'react-auth-kit'","title":"Import"},{"location":"usage/#demo","text":"Integrate AuthProvider before Routes. The best place is app.js . //app.js import React from 'react'; import { AuthProvider } from 'react-auth-kit' import RouteComponent from './routes'; const App = () => ( <AuthProvider authStorageType = {'cookie'} authStorageName={'_auth_t'} authTimeStorageName={'_auth_time'} stateStorageName={'_auth_state'} cookieDomain={window.location.hostname} cookieSecure={window.location.protocol === \"https:\"} refreshTokenName={'_refresh_t'}> <RouteComponent /> </AuthProvider> ); export default App;","title":"Demo"},{"location":"usage/#props","text":"Name Type Default Description children node The content of the component authStorageType 'localstorage' | 'cookie' 'cookie' The type of the auth storage. In localstorage, the tokens store in localStorage. In cookie, the tokens sotore in cookies. authStorageName string '_auth_t' The name of the storage, which stores the auth token. Applicable for both cookies and localStorage. authTimeStorageName string '_auth_time' The name of the storage, which stores the auth time. Applicable for both cookies and localStorage stateStorageName string '_auth_state' The name of the storage, which stores the auth user state. Applicable for both cookies and localStorage refreshTokenName string ( optional ) The Name of refresh Token storage. If you are now using the refresh token feature, then don't use the prop, if you are using the refresh token feature, only then use the prop. For more information, Go to the Refresh Token page cookieDomain string ( optional ) The Domain name for all cookies. \u26a0 If authStorageType = cookie , then you must put a value Refer this for more info cookieSecure boolean ( optional ) false The cookie secure flag. \u26a0 If authStorageType = cookie , then you must put a value Refer this for more info \u2014 \ud83d\udd11 \u2014 React Auth Kit is Apache 2.0 License code","title":"Props"}]}